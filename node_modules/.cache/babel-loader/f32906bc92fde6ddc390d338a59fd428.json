{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nconst types = {\n  phone: {\n    regex: /^\\(?\\d{2}\\)?[\\s-]?\\d{4,5}-?\\d{4}$/,\n    message: 'Preencha um número de telefone válido.'\n  }\n};\n\nconst useForm = type => {\n  _s();\n\n  const [value, setValue] = React.useState('');\n  const [error, setError] = React.useState(null);\n\n  function validate(value) {\n    if (type === false) return true;\n\n    if (value.length === 0) {\n      setError('Preencha um valor.');\n      return false;\n    } else if (types[type] && !types[type].regex.test(value)) {\n      setError(types[type].message);\n      return false;\n    } else {\n      setError(null);\n      return true;\n    }\n  }\n\n  function onChange({\n    target\n  }) {\n    if (error) validate(target.value);\n    setValue(target.value);\n\n    if (target.id === 'phone') {\n      const regex = /^([0-9]{2})([0-9]{4,5})([0-9]{4})$/;\n      const str = target.value.replace(/[^0-9]/g, \"\").slice(0, 11);\n      const result = str.replace(regex, \"($1)$2-$3\");\n      setValue(result);\n    }\n  }\n\n  return {\n    value,\n    setValue,\n    onChange,\n    error,\n    validate: () => validate(value),\n    onBlur: () => validate(value)\n  };\n};\n\n_s(useForm, \"2xVBvVJ4brbuuUPeIt3XLET8CmM=\");\n\nexport default useForm;","map":{"version":3,"sources":["D:/Cardapio2021/src/Hooks/useForm.js"],"names":["React","types","phone","regex","message","useForm","type","value","setValue","useState","error","setError","validate","length","test","onChange","target","id","str","replace","slice","result","onBlur"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,mCADF;AAELC,IAAAA,OAAO,EAAE;AAFJ;AADK,CAAd;;AAOA,MAAMC,OAAO,GAAIC,IAAD,IAAU;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACS,QAAN,CAAe,EAAf,CAA1B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,KAAK,CAACS,QAAN,CAAe,IAAf,CAA1B;;AAEA,WAASG,QAAT,CAAkBL,KAAlB,EAAyB;AACvB,QAAID,IAAI,KAAK,KAAb,EAAoB,OAAO,IAAP;;AACpB,QAAIC,KAAK,CAACM,MAAN,KAAiB,CAArB,EAAwB;AACtBF,MAAAA,QAAQ,CAAC,oBAAD,CAAR;AACA,aAAO,KAAP;AACD,KAHD,MAGO,IAAIV,KAAK,CAACK,IAAD,CAAL,IAAe,CAACL,KAAK,CAACK,IAAD,CAAL,CAAYH,KAAZ,CAAkBW,IAAlB,CAAuBP,KAAvB,CAApB,EAAmD;AACxDI,MAAAA,QAAQ,CAACV,KAAK,CAACK,IAAD,CAAL,CAAYF,OAAb,CAAR;AACA,aAAO,KAAP;AACD,KAHM,MAGA;AACLO,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,aAAO,IAAP;AACD;AACF;;AAED,WAASI,QAAT,CAAkB;AAAEC,IAAAA;AAAF,GAAlB,EAA8B;AAC5B,QAAIN,KAAJ,EAAWE,QAAQ,CAACI,MAAM,CAACT,KAAR,CAAR;AACXC,IAAAA,QAAQ,CAACQ,MAAM,CAACT,KAAR,CAAR;;AACA,QAAIS,MAAM,CAACC,EAAP,KAAc,OAAlB,EAA2B;AACzB,YAAMd,KAAK,GAAG,oCAAd;AACA,YAAMe,GAAG,GAAGF,MAAM,CAACT,KAAP,CAAaY,OAAb,CAAqB,SAArB,EAAgC,EAAhC,EAAoCC,KAApC,CAA0C,CAA1C,EAA6C,EAA7C,CAAZ;AACA,YAAMC,MAAM,GAAGH,GAAG,CAACC,OAAJ,CAAYhB,KAAZ,EAAmB,WAAnB,CAAf;AACAK,MAAAA,QAAQ,CAACa,MAAD,CAAR;AACD;AACF;;AAED,SAAO;AACLd,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLO,IAAAA,QAHK;AAILL,IAAAA,KAJK;AAKLE,IAAAA,QAAQ,EAAE,MAAMA,QAAQ,CAACL,KAAD,CALnB;AAMLe,IAAAA,MAAM,EAAE,MAAMV,QAAQ,CAACL,KAAD;AANjB,GAAP;AASD,CAtCD;;GAAMF,O;;AAwCN,eAAeA,OAAf","sourcesContent":["import React from 'react';\n\nconst types = {\n  phone: {\n    regex: /^\\(?\\d{2}\\)?[\\s-]?\\d{4,5}-?\\d{4}$/,\n    message: 'Preencha um número de telefone válido.'\n  }\n}\n\nconst useForm = (type) => {\n  const [value, setValue] = React.useState('');\n  const [error, setError] = React.useState(null);\n\n  function validate(value) {\n    if (type === false) return true;\n    if (value.length === 0) {\n      setError('Preencha um valor.');\n      return false;\n    } else if (types[type] && !types[type].regex.test(value)) {\n      setError(types[type].message);\n      return false;\n    } else {\n      setError(null);\n      return true;\n    }\n  }\n\n  function onChange({ target }) {\n    if (error) validate(target.value);\n    setValue(target.value);\n    if (target.id === 'phone') {\n      const regex = /^([0-9]{2})([0-9]{4,5})([0-9]{4})$/;\n      const str = target.value.replace(/[^0-9]/g, \"\").slice(0, 11);\n      const result = str.replace(regex, \"($1)$2-$3\");\n      setValue(result);\n    }\n  }\n\n  return {\n    value,\n    setValue,\n    onChange,\n    error,\n    validate: () => validate(value),\n    onBlur: () => validate(value)\n  }\n\n}\n\nexport default useForm;"]},"metadata":{},"sourceType":"module"}